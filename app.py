# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vs2omneQ0pspoOu8_7iT8EndF2ktr8mI
"""

# app.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# Page settings
st.set_page_config(page_title="Employee Attrition Predictor", layout="wide")

st.title("üë• Employee Attrition Predictor")
st.markdown("Predict which employees are likely to leave your company and why.")

# Upload data
@st.cache_data
def load_data():
    return pd.read_csv("WA_Fn-UseC_-HR-Employee-Attrition.csv")

df = load_data()

# Target column
df["AttritionFlag"] = df["Attrition"].map({"Yes": 1, "No": 0})

# Sidebar - User filters
st.sidebar.header("üîé Filter the data")

selected_department = st.sidebar.multiselect(
    "Department",
    options=df["Department"].unique(),
    default=df["Department"].unique()
)

selected_overtime = st.sidebar.multiselect(
    "OverTime",
    options=df["OverTime"].unique(),
    default=df["OverTime"].unique()
)

df_filtered = df[
    (df["Department"].isin(selected_department)) &
    (df["OverTime"].isin(selected_overtime))
]

# Tabs
tab1, tab2, tab3 = st.tabs(["üìä Visual Analysis", "üéØ Model Training", "üß† Live Predictor"])

# Tab 1: Visuals
with tab1:
    st.subheader("üìä Attrition Distribution")
    attr_counts = df_filtered["Attrition"].value_counts()
    fig1, ax1 = plt.subplots()
    ax1.pie(attr_counts, labels=attr_counts.index, autopct='%1.1f%%', startangle=90)
    ax1.axis('equal')
    st.pyplot(fig1)

    st.subheader("üìâ Attrition by Monthly Income")
    fig2, ax2 = plt.subplots()
    sns.boxplot(data=df_filtered, x="Attrition", y="MonthlyIncome", ax=ax2)
    st.pyplot(fig2)

    st.subheader("üìç Attrition by Job Role")
    fig3, ax3 = plt.subplots(figsize=(10, 4))
    sns.countplot(data=df_filtered, x="JobRole", hue="Attrition", ax=ax3)
    plt.xticks(rotation=45)
    st.pyplot(fig3)

# Tab 2: Model Training
with tab2:
    st.subheader("üéØ Train a Random Forest Classifier")

    # Preprocessing
    df_model = df_filtered.copy()
    df_model["AttritionFlag"] = df_model["Attrition"].map({"Yes": 1, "No": 0})
    df_model["OverTimeBinary"] = df_model["OverTime"].map({"Yes": 1, "No": 0})
    df_model.drop(columns=["Attrition", "OverTime", "EmployeeNumber", "EmployeeCount", "StandardHours", "Over18"], inplace=True)
    df_model = pd.get_dummies(df_model, drop_first=True)

    X = df_model.drop(columns=["AttritionFlag"])
    y = df_model["AttritionFlag"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    model = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42)
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    y_proba = model.predict_proba(X_test_scaled)[:, 1]

    st.text("Confusion Matrix")
    st.write(confusion_matrix(y_test, y_pred))

    st.text("Classification Report")
    st.text(classification_report(y_test, y_pred))

    st.text(f"ROC AUC Score: {roc_auc_score(y_test, y_proba):.3f}")

# Tab 3: Live Predictor
with tab3:
    st.subheader("üß† Predict Attrition for a Hypothetical Employee")

    # Sample user inputs
    age = st.slider("Age", 18, 60, 30)
    distance = st.slider("Distance from Home (km)", 1, 30, 5)
    income = st.slider("Monthly Income (¬£)", 1000, 20000, 5000)
    overtime = st.selectbox("OverTime", ["Yes", "No"])
    job_level = st.selectbox("Job Level", [1, 2, 3, 4, 5])
    years_at_company = st.slider("Years at Company", 0, 40, 5)

    overtime_binary = 1 if overtime == "Yes" else 0

    sample_df = pd.DataFrame([{
        "Age": age,
        "DistanceFromHome": distance,
        "MonthlyIncome": income,
        "OverTimeBinary": overtime_binary,
        "JobLevel": job_level,
        "YearsAtCompany": years_at_company
    }])

    # Refit simplified model
    model_inputs = ["Age", "DistanceFromHome", "MonthlyIncome", "OverTimeBinary", "JobLevel", "YearsAtCompany"]
    X_train_live = df_model[model_inputs]
    y_train_live = df_model["AttritionFlag"]

    model_live = RandomForestClassifier(n_estimators=100, class_weight="balanced", random_state=42)
    model_live.fit(X_train_live, y_train_live)

    # Prediction
    prediction = model_live.predict(sample_df)[0]
    probability = model_live.predict_proba(sample_df)[0][1]

    if prediction == 1:
        st.error(f"üö® Likely to Leave (Probability: {probability:.2%})")
    else:
        st.success(f"‚úÖ Likely to Stay (Probability: {1 - probability:.2%})")